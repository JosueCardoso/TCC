ü	
jG:\Estimatz\Estimatz.API\Estimatz.API\Domain\Estimatz.API.Services\Calculator\AbstractFactoryCalculator.cs
	namespace 	
Estimatz
 
. 
API 
. 
Services 
.  

Calculator  *
{ 
public 

static 
class %
AbstractFactoryCalculator 1
{ 
public 
static 
ICalculator !

GetFactory" ,
(, -
EstimateType- 9
estimateType: F
)F G
{ 	
if		 
(		 
estimateType		 
==		 
EstimateType		  ,
.		, -
Default		- 4
)		4 5
return

 
new

 
DefaultCalculator

 ,
(

, -
)

- .
;

. /
if 
( 
estimateType 
== 
EstimateType +
.+ ,

Trivariate, 6
)6 7
return 
new  
TrivariateCalculator /
(/ 0
)0 1
;1 2
throw 
new 
ArgumentException '
(' (
$str( `
)` a
;a b
} 	
} 
} ¾
bG:\Estimatz\Estimatz.API\Estimatz.API\Domain\Estimatz.API.Services\Calculator\DefaultCalculator.cs
	namespace 	
Estimatz
 
. 
API 
. 
Services 
.  

Calculator  *
{ 
public 

class 
DefaultCalculator "
:# $
ICalculator% 0
{ 
public 
VotingResult 
Calcule #
(# $
List$ (
<( )
string) /
>/ 0
votes1 6
,6 7
Decks8 =
deck> B
)B C
{		 	
var

 
result

 
=

 
GetAmountByCard

 (
(

( )
votes

) .
)

. /
;

/ 0
result 
. 
Average 
= 
GetAverageByDeck -
(- .
votes. 3
,3 4
deck5 9
)9 :
;: ;
result 
. 
Deck 
= 
deck 
; 
result 
. 
EstimateType 
=  !
EstimateType" .
.. /
Default/ 6
;6 7
return 
result 
; 
} 	
private 
VotingResult 
GetAmountByCard ,
(, -
List- 1
<1 2
string2 8
>8 9
votes: ?
)? @
{ 	
var 
result 
= 
new 
VotingResult )
() *
)* +
;+ ,
votes 
. 
ForEach 
( 
vote 
=> !
result" (
.( )

AddNewVote) 3
(3 4
vote4 8
)8 9
)9 :
;: ;
return 
result 
; 
} 	
private 
string 
GetAverageByDeck '
(' (
List( ,
<, -
string- 3
>3 4
votes5 :
,: ;
Decks< A
deckB F
)F G
{ 	
if 
( 
deck 
== 
Decks 
. 
TShirt $
)$ %
return 
string 
. 
Empty #
;# $
double 
amount 
= 
$num 
; 
int   
count   
=   
$num   
;   
foreach"" 
("" 
var"" 
vote"" 
in""  
votes""! &
)""& '
{## 
if$$ 
($$ 
vote$$ 
==$$ 
$str$$ "
)$$" #
{%% 
amount&& 
+=&& 
$num&& !
;&&! "
count'' 
++'' 
;'' 
}(( 
else)) 
if)) 
()) 
int)) 
.)) 
TryParse)) %
())% &
vote))& *
,))* +
out)), /
var))0 3
result))4 :
))): ;
))); <
{** 
amount++ 
+=++ 
result++ $
;++$ %
count,, 
++,, 
;,, 
}-- 
}.. 
if00 
(00 
count00 
==00 
$num00 
)00 
return11 
string11 
.11 
Empty11 #
;11# $
return33 
Math33 
.33 
Round33 
(33 
amount33 $
/33$ %
count33% *
,33* +
$num33+ ,
)33, -
.33- .
ToString33. 6
(336 7
)337 8
;338 9
}44 	
}55 
}66 Ø
\G:\Estimatz\Estimatz.API\Estimatz.API\Domain\Estimatz.API.Services\Calculator\ICalculator.cs
	namespace 	
Estimatz
 
. 
API 
. 
Services 
.  

Calculator  *
{ 
public 

	interface 
ICalculator  
{ 
VotingResult 
Calcule 
( 
List !
<! "
string" (
>( )
votes* /
,/ 0
Decks1 6
deck7 ;
); <
;< =
}		 
}

 §
eG:\Estimatz\Estimatz.API\Estimatz.API\Domain\Estimatz.API.Services\Calculator\TrivariateCalculator.cs
	namespace 	
Estimatz
 
. 
API 
. 
Services 
.  

Calculator  *
{ 
public 

class  
TrivariateCalculator %
:& '
ICalculator( 3
{ 
public 
VotingResult 
Calcule #
(# $
List$ (
<( )
string) /
>/ 0
votes1 6
,6 7
Decks8 =
deck> B
)B C
{		 	
throw

 
new

 #
NotImplementedException

 -
(

- .
)

. /
;

/ 0
} 	
} 
} 